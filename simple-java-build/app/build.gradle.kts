
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.9.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }
}
dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    val junitVersion = "5.7.0"
    val junitPioneerVersion = "0.9.0"
    val mockitoVersion = "3.4.6"
    val hamcrestVersion = "1.3"
    val jacksonVersion = "2.11.3"
    val guavaVersion = "29.0-jre"
    val log4jVersion = "2.14.0"
    val testcontainersVersion = "1.17.3"
    val kafkaVersion = "3.3.1"
    val confluentVersion = "7.2.2"

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")

    testImplementation("org.junit-pioneer:junit-pioneer:$junitPioneerVersion")

    testImplementation("org.mockito:mockito-junit-jupiter:$mockitoVersion")
    testImplementation("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")

    testImplementation("com.google.guava:guava:$guavaVersion")
    testImplementation("com.google.guava:guava-testlib:$guavaVersion")
    testImplementation("org.apache.logging.log4j:log4j-api:$log4jVersion")
    testImplementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
    testImplementation("org.apache.logging.log4j:log4j-slf4j18-impl:$log4jVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:29.0-jre")


    testImplementation("org.testcontainers:testcontainers:$testcontainersVersion")
    testImplementation("org.testcontainers:junit-jupiter:$testcontainersVersion")
    testImplementation("org.testcontainers:kafka:$testcontainersVersion")


    // SpecMesh stuff
    testImplementation("io.specmesh:specmesh-parser:0.1.0")
    testImplementation("io.specmesh:specmesh-kafka:0.1.0")
    testImplementation("io.specmesh:specmesh-kafka-test:0.1.0")

    // Kafka deps
    implementation("org.apache.kafka:kafka-clients:$kafkaVersion")

    implementation("io.confluent:kafka-schema-registry-client:$confluentVersion")
    implementation("io.confluent:kafka-json-schema-provider:$confluentVersion")
    implementation("io.confluent:kafka-json-schema-serializer:$confluentVersion")
    implementation("io.confluent:kafka-avro-serializer:$confluentVersion")


//    io.confluent:kafka-protobuf-provider:7.3.0'

    implementation("com.google.protobuf:protobuf-java:3.21.11")
    implementation("io.confluent:kafka-protobuf-serializer:$confluentVersion")
//    implementation("io.confluent:kafka-protobug-schema-serializer:$confluentVersion")

}

application {
    // Define the main class for the application.
    mainClass.set("simple.java.app.App")
}

tasks.test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}
